<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHNzcwBzc3MAc3NzZ3Nz
        c81zc3PNc3Nzzm9vb8JgYGA8ZGRkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc3NzAHNz
        cwZzc3O0c3Nz/3Nzc/9zc3P/cXFx/2RkZH93d3cAbGxsAHNzcwBzc3MLc3NzEXJycg1oaGgGEBAQAFRU
        VAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABzc3MAc3NzFXNzc9Nzc3P/c3Nz/3Nzc/9zc3P/Z2dnpQkJCQJZWVkAc3NzR3Nzc71zc3PQc3NzymZm
        ZpVMTEwLVFRUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzc3MAc3NzAHNzcyhzc3N5cXFxLrW1
        tQBubm4AAAAAAHNzcwBzc3Msc3Nz6nNzc/9zc3P/c3Nz/3Nzc/9oaGi9RUVFCHNzc0tzc3Pic3Nz/3Nz
        c/9tbW3zX19fbDk5OQJUVFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc3NzAHNzcwBzc3Mqc3NzxXNz
        c/9zc3PbcnJyXXBwcAdzc3MKc3NzPnNzc5tzc3P7c3Nz/3Nzc/9zc3P/cXFx/2NjY4NycnJGc3Nz4nNz
        c/9zc3P/bm5u919fX3A9PT0DUFBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHNzcwBzc3MAc3NzKHNz
        c8Vzc3P/c3Nz/3Nzc/9zc3P0c3NzonNzc7Fzc3Pyc3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9ubm7yX19fRnNz
        c7Zzc3P/c3Nz/3Nzc/9mZmbHS0tLD1NTUwBzc3MAPj4+AHFxcRRkZGQRkZGRAFRUVAAAAAAAc3NzAHNz
        cwBzc3N7c3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Jycv9wcHDtbW1tvmtra5FsbGx4bm5ud2lp
        aX9jY2Mpc3NzynNzc/9zc3P/c3Nz/2dnZ8RMTEwNVVVVAHNzcwBzc3MucnJyw2JiYps5OTkEVFRUAAAA
        AABzc3MAcXFxAHBwcDNycnLfc3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9vb2/taWlpkGNjYzpsbGwvcnJySXNz
        c1dzc3NOcHBwKm9vbw1zc3PCc3Nz/3Nzc/9zc3P/b29v9GlpaWhzc3MTc3NzPnNzc8lycnL/Y2NjwUZG
        RgpUVFQAAAAAAAAAAABqamoAhISEAHFxcWZzc3P3c3Nz/3Nzc/9zc3P/bW1t0mJiYklwcHA9c3NzoHNz
        c+Jzc3P5c3Nz/nNzc/1ubm7eYGBgNnNzc7pzc3P/c3Nz/3Nzc/9zc3P/cnJy83Nzc9Zzc3Ptc3Nz/3Nz
        c/9jY2PGSUlJDFRUVAAAAAAAAAAAAAAAAABtbW0AbGxsCXJycqhzc3P/c3Nz/2xsbNFhYWE3c3NzbHNz
        c+lzc3P/c3Nz/3Nzc/9ycnL/cHBw/WVlZaNqamo9c3Nz33Nzc/9zc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Nz
        c/9zc3P/bm5u/11dXZAmJiYCVFRUAAAAAAAAAAAAAAAAAHNzcwBzc3MKc3NzsXNzc/9vb2/sYmJiR3Nz
        c2xzc3P2c3Nz/3Fxcf5sbGzdaWlpmmhoaHJjY2NXaGhoM3Nzc7lzc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Nz
        c/9zc3P/c3Nz/29vb/9gYGCsUlJSGFVVVQBUVFQAAAAAAAAAAAAAAAAAc3NzAHNzc0Bzc3PycnJy/2lp
        aY1wcHA+c3Nz6HNzc/9wcHD6ZmZmm1lZWSQuLi4BcHBwAHR0dB9zc3O6c3Nz/3Nzc/9zc3P/c3Nz/3Jy
        cv9ycnL/cnJy/3Jycv9ubm7+YGBgqk9PTxhVVVUABQUFAAAAAABzc3MAc3NzBnNzcxRzc3Mpc3Nzm3Nz
        c/9wcHDqZGRkOHNzc6Fzc3P/cXFx/2ZmZpdOTk4LV1dXAHNzcwBzc3Mic3Nzu3Nzc/9zc3P/c3Nz/3Nz
        c/9sbGzyZWVlnGhoaHRpaWmAaGhoiV9fX25kZGQtdXV1G3Nzcwtzc3MBc3NzAHNzc2hzc3O0c3Nz0nNz
        c+pzc3P7c3Nz/21tbbhtbW0uc3Nz4nNzc/9sbGzYWVlZIlxcXABzc3MAc3NzInNzc7tzc3P/c3Nz/3Nz
        c/9zc3P/a2tr8VxcXG9wcHBNbm5uPmlpaQxycnJOc3Nzg3Nzc9Jzc3Pec3Nzw3JycphiYmI+c3NzzXNz
        c/9zc3P/c3Nz/3Nzc/9zc3P/bGxsinJyckhzc3P5cnJy/2hoaJT///8AcXFxAHNzcyJzc3O8c3Nz/3Nz
        c/9zc3P/c3Nz/2tra/FcXFxqcXFxXHNzc+9sbGzdY2NjPnNzc9hzc3P/c3Nz/3Nzc/9zc3P/cXFx/2Bg
        YMBzc3POc3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9sbGxyc3NzWXNzc/5ycnL/aGhoa3FxcQBzc3Mic3NzvHNz
        c/9zc3P/c3Nz/3Nzc/9ra2vxXFxcbF1dXQhzc3Oxc3Nz/2xsbPJfX19Nc3NzzHNzc/9zc3P/c3Nz/3Nz
        c/9xcXH/X19fyHNzc85zc3P/c3Nz/3Nzc/9zc3P/c3Nz/25ubnJzc3NSc3Nz/XBwcPtjY2NVdXV1HnNz
        c7tzc3P/c3Nz/3Nzc/9zc3P/a2tr8VxcXGwyMjIDdHR0C3Nzc8Nzc3P/bGxs8l9fX1Bzc3PRc3Nz/3Nz
        c/9zc3P/c3Nz/3Fxcf9gYGDIb29vyHJycv9zc3P/c3Nz/3Fxcf5ubm74aWlpfHBwcC9ubm7kZWVlomho
        aDNzc3O6c3Nz/3Nzc/9zc3P/c3Nz/2tra/FcXFxsPz8/BG9vbwBzc3Mpc3Nz5XNzc/9oaGjkY2NjT3Nz
        c+Rzc3P/c3Nz/3Nzc/9ycnL/b29v/11dXcFgYGBEZGRkh2dnZ61oaGjDY2Njh19fX0liYmIpbGxsDl5e
        Xjpqamo+c3NzunNzc/9zc3P/c3Nz/3Nzc/9ra2vxXFxcbEBAQARdXV0Ac3NzAXNzc4Fzc3P/cnJy/2Ji
        Yrtubm5hc3Nz+nJycv9qamruZ2dnzGNjY6tfX1+FVlZWQAMDAwC2trYAOTk5BEJCQglycnJGc3NztnNz
        c8lzc3PAc3Nzt3Nzc95zc3P/c3Nz/3Nzc/9zc3P/a2tr8VxcXGw+Pj4DXV1dAHNzcwFzc3NVc3Nz63Nz
        c/9sbGz9W1tbcnNzc6Fzc3P/bGxs/VhYWHBJSUkNODg4A21tbQADAwMAAAAAAHV1dQBoaGgAc3NzS3Nz
        c+Jzc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9zc3P/c3Nz/2tra/FcXFxqWlpaBnZ2dgpzc3Mnc3NzgnNz
        c+tzc3P/cXFx/2FhYb5qampXc3Nz7HNzc/9kZGTeUVFRJFRUVAAAAAAAAAAAAAAAAABzc3MAc3NzAHNz
        c0dzc3Pic3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9sbGzyXFxcbnFxcVxzc3Owc3NzwnNz
        c+Rzc3P9c3Nz/3Fxcf9jY2PYXl5eU3Nzc71zc3P/cHBw/11dXY0AAAAAUlJSAAAAAAAAAAAAAAAAAHNz
        cwBzc3MLc3NzvHNzc/9zc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Nzc/9zc3P/cnJy/2VlZZlwcHBPc3Nz7nNz
        c/9zc3P/c3Nz/3Jycv9sbGz9YGBgwl5eXlVzc3Opc3Nz/3Nzc/9ycnL/bGxsmFZWVgZfX18AAAAAAAAA
        AAAAAAAAc3NzAHNzcxJzc3PRc3Nz/25ubvdmZmbKaGhoyXBwcPVzc3P/c3Nz/3Nzc/9ycnL/aGhob21t
        bUNsbGzjbGxs9mxsbPVoaGjoYmJiwFtbW3VqampZc3Nzv3Nzc/5zc3P/c3Nz/3Nzc/9xcXH0aWlpXISE
        hABUVFQAAAAAAAAAAABxcXEAcXFxDnNzc8ptbW30X19fcEpKSg9ISEgOaWlpcXJycvdzc3P/c3Nz/3Jy
        cv9paWl6ZGRkCmJiYkFeXl5TXl5eVWJiYlFtbW1gc3NzoHNzc+xzc3P/c3Nz/3Nzc/9zc3P/c3Nz/3Nz
        c/9vb2/ZX19fLGNjYwBUVFQAAAAAAGZmZgBnZ2cHZmZmm19fX2w/Pz8DUFBQAHFxcQBxcXEac3Nz2nNz
        c/9zc3P/cnJy/2hoaINycnJQc3Nz1nR0dMp0dHTOc3Nz4XNzc/hzc3P/cnJy/3BwcP9ycnL/c3Nz/3Nz
        c/9zc3P/c3Nz/2pqav5YWFhnXFxcAFRUVAAAAAAARUVFAEZGRgBOTk4OTU1NBE1NTQBzc3MAc3NzAHNz
        c0Fzc3Puc3Nz/3Nzc/9ubm7+X19fa3Nzc4Vzc3P/c3Nz/3Nzc/9zc3P/cnJy/2xsbP1kZGThXV1dkWtr
        a6FxcXH3c3Nz/3Nzc/9ra2v/WlparFJSUhhUVFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHR0AHNz
        cwBzc3Mtc3NzynNzc/9zc3P/b29v/2BgYKtkZGQuc3Nz03Nzc/9zc3P/c3Nz/3Nzc/9qamrtWFhYcFFR
        USU8PDwCWVlZCWhoaGZvb2/gampq/1paWqxQUFAZU1NTAE5OTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABxcXEAcXFxFXJycsNzc3P/c3Nz/25ubv9gYGCtTk5OF3R0dB1zc3Pfc3Nz/3Nzc/9zc3P/c3Nz/2Zm
        ZsdLS0sNVFRUAAAAAABQUFAALS0tAF9fXzRYWFhuUlJSGVNTUwBMTEwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGRkZABkZGQTYmJio2NjY8ljY2PNXV1dk1JSUhlhYWEAc3NzDHNzc8Vzc3P/c3Nz/3Nz
        c/9ycnL/Y2NjphISEgJUVFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMjIyACYmJgBEREQHSUlJDUtLSw9GRkYESkpKAHNzcwB6enoBcnJynHJy
        cv9ycnL/cnJy/29vb/9fX1+Abm5uAFRUVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc3NzAF9f
        XwBiYmJHYGBgyGBgYM5gYGDOXV1dx1ZWVkBXV1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gf///wHD//8Agf+PAAH/AAAD/gAABz4AAAYeAAAAHwAAAB8AAAAfAA
        AAPwAQAHgAYAAQAMAAAAGAAAABAAAAAAAAAAABAAAAAgAMAAQAPgAAAPwAAAH4AAAA+AAAAPgAAAB4YA
        AAfOAAAH/AAAD/gADx/4EA///DAf///4H/8=
</value>
  </data>
</root>